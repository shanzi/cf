/* Generated by powerful Codeforces Tool
 * Author: czhang
 * Time: 2021-03-09 21:31:52
**/

#include <bits/stdc++.h>
#include <valarray>

using namespace std;
typedef long long ll;

int rdigit(const int v) {
    const int rdigit_table[] = {0, 1, 5, -1, -1, 2, -1, -1, 8, -1};
    return rdigit_table[(v % 10)]*10 + rdigit_table[(v / 10)];
}

bool can_reflect(const int v) {
    const bool ref_table[] = {true, true, true, false, false, true, false, false, true, false};
    return ref_table[v / 10] && ref_table[v % 10];
}

bool check(const int hh, const int mm, const int HH, const int MM) {
    return (HH < hh) && (MM < mm) && can_reflect(HH) && can_reflect(MM) && rdigit(HH) < mm && rdigit(MM) < hh; 
}

void solve() {
    int hh, mm;
    int HH, MM;

    cin>>hh>>mm;
    cin>>HH;
    cin.ignore(1);
    cin>>MM;

    valarray<int> hnext(hh);
    valarray<int> mnext(mm);

    for (int i = 0; i < hh; ++i) {
        if (can_reflect(i)) {
            for (int j = 1; j <= hh; ++j) {
                hnext[(i - j + hh) % hh] = i;
                if (can_reflect((i - j + hh) % hh)) break;
            }
        }
    }

    for (int i = 0; i < mm; ++i) {
        if (can_reflect(i)) {
            for (int j = 1; j <= mm; ++j) {
                mnext[(i - j + mm) % mm] = i;
                if (can_reflect((i - j + mm) % mm)) break;
            }
        }
    }

    while (!check(hh, mm, HH, MM)) {
        if (mnext[MM] <= MM) {
            HH = hnext[HH];
        }
        MM = mnext[MM];
    }

    if (HH < 10) {
        cout<<'0';
    }
    cout<<HH<<':';
    if (MM < 10) {
        cout<<'0';
    }
    cout<<MM<<endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int tc = 1;
    cin>>tc;
    for (int i = 0; i < tc; ++i) {
        solve();
    }
    return 0;
}
